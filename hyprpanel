#!/usr/bin/env python3
import os
from pathlib import Path

os.environ["GI_TYPELIB_PATH"] = "/usr/include/hyprpanel/src"

from ctypes import CDLL

CDLL("libgtk4-layer-shell.so")
from subprocess import Popen
from subprocess import check_output, call
import gi

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from src.core.create_panel import *
import asyncio
from gi.repository import Gtk, Adw, GLib, Gio, Gdk
from datetime import datetime
import json
import sys
import importlib

spam_loader = importlib.util.find_spec("hyprpy")
found = spam_loader is not None

if not found:
    print("Module hyprpy not found, try | pip install hyprpy | and try again")
    sys.exit()

from hyprpy import Hyprland
from multiprocessing import Process
from hyprpy.utils.signals import Signal
import psutil
import math
import pulsectl
import toml
from collections import ChainMap
from src.plugins.dockbar import Dockbar
from src.core.utils import Utils


class Panel(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.utils = Utils(
            application_id="com.github.utils",
        )
        self.connect("activate", self.on_activate)
        self.bottom_panel = None
        self.right_panel = None
        self.left_panel = None
        self.top_panel = None
        self.top_panel_background = None
        self.top_panel_box_left = Gtk.Box(spacing=10)
        self.top_panel_box_systray = Gtk.Box(spacing=0)
        self.top_panel_box_right = Gtk.Box(spacing=6)
        self.top_panel_grid_right = Gtk.Grid()
        self.top_panel_grid_right.attach(self.top_panel_box_right, 1, 0, 1, 2)
        self.top_panel_grid_right.attach_next_to(
            self.top_panel_box_systray,
            self.top_panel_box_right,
            Gtk.PositionType.RIGHT,
            1,
            2,
        )
        self.top_panel_box_center = Gtk.Box(spacing=6)
        self.top_panel_box_full = Gtk.Grid()
        self.top_panel_box_full.set_column_homogeneous(True)
        self.top_panel_box_full.attach(self.top_panel_box_left, 1, 0, 1, 2)
        self.top_panel_box_full.attach_next_to(
            self.top_panel_box_center,
            self.top_panel_box_left,
            Gtk.PositionType.RIGHT,
            1,
            2,
        )
        self.top_panel_box_full.attach_next_to(
            self.top_panel_grid_right,
            self.top_panel_box_center,
            Gtk.PositionType.RIGHT,
            1,
            3,
        )
        self.monitor_width = 0
        self.monitor_height = 0
        self.toggle_mute = {}
        self.volume = 0
        self.clock_box = Gtk.Box()
        self.args = sys.argv
        self.home = os.path.expanduser("~")
        self.config_path = os.path.join(self.home, ".config/hyprpanel")
        self.dockbar_config = os.path.join(self.config_path, "dockbar.toml")
        self.style_css_config = os.path.join(self.config_path, "style.css")
        self.workspace_list_config = os.path.join(self.config_path, "workspacebar.toml")
        self.topbar_config = os.path.join(self.config_path, "panel.toml")
        self.menu_config = os.path.join(self.config_path, "menu.toml")
        self.window_notes_config = os.path.join(self.config_path, "window-config.toml")
        self.cmd_config = os.path.join(self.config_path, "cmd.toml")
        self.psutil_store = {}
        self.panel_cfg = self.load_topbar_config()
        self.dock = Dockbar(
            application_id="com.github.dockbar",
        )
        self.icon_theme_list = Gtk.IconTheme().get_icon_names()
        self.active_window_changed = None

    def on_activate(self, app):
        self.top_panel_box_left.add_css_class("top_panel_box_left")
        self.top_panel_box_right.add_css_class("top_panel_box_right")
        self.top_panel_box_systray.add_css_class("top_panel_box_systray")
        self.top_panel_box_center.add_css_class("top_panel_box_center")
        self.top_panel_box_full.add_css_class("top_panel_box_full")
        panel_on_top = "TOP"
        exclusive = True
        all_panels_enabled = True
        self.instance = self.HyprlandInstance()
        default_panel = True

        # start cmd output session, cmd.toml
        self.cmd_output()

        # get monitor info and set the width, height for the panel
        monitor_info = self.get_monitor_info()
        for monitor_name in monitor_info:
            if self.instance.get_monitor_by_name(name=monitor_name).is_focused:
                self.monitor_width, self.monitor_height = monitor_info[monitor_name]

        if "--custom" in self.args:
            default_panel = False

        if "--background" in self.args:
            panel_on_top = "BOTTOM"
            exclusive = False

        # panel.cfg setup
        with open(self.topbar_config, "r") as f:
            panel_toml = toml.load(f)
            for p in panel_toml:
                if "bottom" == p:
                    exclusive = True
                    if panel_toml[p]["Exclusive"] == "False":
                        exclusive = False

                    position = panel_toml[p]["position"]
                    self.bottom_panel = CreatePanel(
                        app, "BOTTOM", position, exclusive, 32, 0, "BottomBar"
                    )
                if "right" == p:
                    exclusive = True
                    if panel_toml[p]["Exclusive"] == "False":
                        exclusive = False
                    position = panel_toml[p]["position"]
                    self.right_panel = CreatePanel(
                        app, "RIGHT", position, exclusive, 0, 32, "RightBar"
                    )
                if "left" == p:
                    exclusive = True
                    if panel_toml[p]["Exclusive"] == "False":
                        exclusive = False
                    position = panel_toml[p]["position"]
                    self.left_panel = CreatePanel(
                        app, "LEFT", position, exclusive, 0, 32, "LeftBar"
                    )
                if "top" == p:
                    exclusive = True
                    if panel_toml[p]["Exclusive"] == "False":
                        exclusive = False
                    position = panel_toml[p]["position"]
                    self.top_panel = CreatePanel(
                        app,
                        "TOP",
                        position,
                        exclusive,
                        self.monitor_width,
                        24,
                        "TopBar",
                    )
                if "top_background" == p:
                    exclusive = True
                    if panel_toml[p]["Exclusive"] == "False":
                        exclusive = False
                    position = panel_toml[p]["position"]
                    self.top_panel_background = CreatePanel(
                        app,
                        "TOP",
                        position,
                        exclusive,
                        self.monitor_width,
                        18,
                        "TopBarBackground",
                    )

        # load css
        css_provider = Gtk.CssProvider()
        css_provider.load_from_file(Gio.File.new_for_path(self.style_css_config))
        Gtk.StyleContext.add_provider_for_display(
            Gdk.Display.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
        )

        # clock widget
        self.clock_box.set_halign(Gtk.Align.CENTER)
        self.clock_box.set_hexpand(True)
        self.clock_box.set_baseline_position(Gtk.BaselinePosition.CENTER)
        self.clock_box.add_css_class("Clock")
        self.clock_button = self.utils.CreateButton(
            "gnome-panel-clock-symbolic", "cal", "ClockButton"
        )
        self.clock_button.set_label(datetime.now().strftime("%d %A %H:%M"))
        self.clock_button.set_halign(Gtk.Align.CENTER)
        self.clock_button.set_hexpand(True)
        self.clock_box.append(self.clock_button)

        # clock widget
        self.clock_box1 = Gtk.Box()
        self.clock_box1.set_halign(Gtk.Align.CENTER)
        self.clock_box1.set_hexpand(True)

        # self.clock_button1 = Gtk.Button()
        # self.clock_box1.append(self.clock_button1)
        # self.clock_box.append(self.clock_box1)
        # ww = Gtk.Dialog()
        # self.popover = Gtk.Popover()
        # self.popover.set_parent(ww)
        # self.utils.CreateGesture(self.clock_button1, 1, self.myapprun)

        # close and full screen buttons at the topbar
        self.cf_box = Gtk.Box()
        self.close_button = self.utils.CreateButton(
            "close-symbolic", "hyprctl dispatch killactive", "cf_button"
        )
        self.fullscreen_button = self.utils.CreateButton(
            "gtk-fullscreen", "hyprctl dispatch fullscreen", "cf_button"
        )
        self.cf_box.append(self.close_button)
        self.cf_box.append(self.fullscreen_button)
        self.cf_box.add_css_class("cf_box")
        self.top_panel_box_left.append(self.cf_box)
        
        #update widgets
        GLib.timeout_add(1000, self.update_clock)
        GLib.timeout_add(200, self.update_widgets)
        GLib.timeout_add(200, self.update_title_topbar)
        GLib.timeout_add(10000, self.mullvad_status)
        GLib.timeout_add(600000, self.clean_pid_store)

        # volumebutton = Gtk.VolumeButton.new()
        # volumebutton.connect("value-changed",self.on_volume_value_changed)
        # volbox.append(volumebutton)

        # notes label
        self.todo_button = Adw.ButtonContent()
        self.todo_button.add_css_class("todo_label")
        self.todo_button.set_icon_name("todoist-symbolic")
        todo = os.path.join(self.home, "Documentos", "todo.txt")

        try:
            txt = open(todo, "r").readlines()[-1]
            self.todo_button.set_label(txt.strip())
            GLib.timeout_add(600000, self.todo_txt)
        except IndexError:
            print("todo.txt is empity or does not exist")

        self.top_panel_box_right.set_halign(Gtk.Align.FILL)
        self.top_panel_box_right.set_homogeneous(True)
        self.top_panel_box_right.set_hexpand(True)
        self.menus = self.create_new_menu()
        # create menus
        for menu in self.menus.values():
            self.top_panel_box_systray.append(menu)
            menu.add_css_class("systray")
            self.top_panel_box_systray.set_halign(Gtk.Align.END)
            self.top_panel_box_systray.set_hexpand(True)

        # gesture space for clicks
        self.top_panel_box_center.append(self.clock_box)

        self.iconbox = Gtk.Box(spacing=0)
        self.icon_title = self.utils.CreateButton("kitty", "nwg-drawer", "kitty")
        self.iconbox.append(self.icon_title)
        # self.top_panel_box_left.append(self.iconbox)

        # setup window title
        self.window_title = Adw.ButtonContent()
        self.top_panel_box_left.append(self.window_title)

        self.window_title.add_css_class("WindowTitle")

        # setup label for top bar background
        self.tbbox = Gtk.Box(spacing=20)
        self.tblabelspace = Gtk.Label(label="    ")
        self.tbworkspace = self.utils.btn_background(
            "tbworkspace", "workspace-symbolic"
        )
        self.tbpid = self.utils.btn_background("tbpid", "view-process-tree")
        self.tbpid_gesture = self.utils.CreateGesture(
            self.tbpid, 1, self.copy_to_clipboard
        )
        self.tbclass = self.utils.btn_background("tbclass", "cs-windows-symbolic")
        self.tbcpusage = self.utils.btn_background(
            "tbcpusage", "cpu-frequency-indicator"
        )
        self.tbmemusage = self.utils.btn_background(
            "tbmemusage", "indicator-sensors-memory"
        )
        self.tbsinkinput = self.utils.btn_background(
            "tbsinkinput", "multimedia-volume-control-symbolic"
        )
        self.tbSIGKILL = self.utils.btn_background("tbSIGKILL", "window-close-symbolic")
        self.tbdiskusage = self.utils.btn_background(
            "tbdiskusage", "disk-check-symbolic"
        )
        self.tbvol = self.utils.btn_background(
            "tbvol", "multimedia-volume-control-symbolic"
        )
        self.tbcard = self.utils.btn_background("tbvoltbcard", "audio-card")
        self.tbdiskusage.set_label("Disk Usage")
        self.tbsinkinput.set_label("Toggle Mute")
        self.tbvol.set_label("Volume")
        self.tbSIGKILL.set_label("SIGKILL")
        self.tbexe = self.utils.btn_background("tbexe", "exec")
        self.tbbox.append(self.tblabelspace)
        self.tbbox.append(self.tbworkspace)
        self.tbbox.append(self.tbclass)
        self.tbbox.append(self.tbpid)
        self.tbbox.append(self.tbSIGKILL)
        # self.tbbox.append(self.tbsinkinput)
        # self.tbbox.append(self.tbcard)
        self.tbbox.append(self.tbvol)
        self.tbbox.append(self.tbcpusage)
        self.tbbox.append(self.tbmemusage)
        # self.tbbox.append(self.tbexe)
        self.tbbox.append(self.tbdiskusage)
        self.tbbox.append(self.todo_button)

        # self.tbSIGKILL.connect("clicked", self.sigkill_activewindow)
        self.top_panel_background.set_content(self.tbbox)

        EventScroll = Gtk.EventControllerScroll.new(
            Gtk.EventControllerScrollFlags.BOTH_AXES
        )
        EventScroll.connect("scroll", self.scroll_event)
        self.top_panel_box_full.add_controller(EventScroll)

        # create panel buttons
        if default_panel:
            workspace_buttons = self.utils.CreateFromAppList(
                "vertical", self.workspace_list_config, "RightBar"
            )
            self.top_panel.set_content(self.top_panel_box_full)
            self.right_panel.set_content(workspace_buttons)

        if [i for i in self.args if "topbar" in i]:
            self.dockbar_config, workspace_buttons = self.create_widgets(
                "horizontal", "TopBar"
            )
            all_panels_enabled = False
            self.top_panel.present()

        # this whole section is intended to setup custom panel positions and widgets
        if "--topbar-apps" in self.args:
            self.top_panel.set_content(self.dockbar_config)
        if "--topbar-workspaces" in self.args:
            self.top_panel.set_content(workspace_buttons)
        if "--topbar-todo" in self.args:
            self.top_panel.set_content(self.todo_label_box)

        if [i for i in self.args if "rightbar" in i]:
            self.dockbar_config, workspace_buttons = self.create_widgets(
                "vertical", "RightBar"
            )
            all_panels_enabled = False
            self.right_panel.present()
        if "--rightbar-apps" in self.args:
            self.right_panel.set_content(self.dockbar_config)
        if "--rightbar-workspaces" in self.args:
            self.right_panel.set_content(workspace_buttons)
        if "--rightbar-todo" in self.args:
            self.right_panel.set_content(self.todo_label_box)

        if [i for i in self.args if "leftbar" in i]:
            self.dockbar_config, workspace_buttons = self.create_widgets(
                "vertical", "LeftBar"
            )
            all_panels_enabled = False
            self.left_panel.present()
        if "--leftbar-apps" in self.args:
            self.left_panel.set_content(self.dockbar_config)
        if "--leftbar-workspaces" in self.args:
            self.left_panel.set_content(workspace_buttons)
        if "--leftbar-todo" in self.args:
            self.left_panel.set_content(self.todo_label_box)

        if [i for i in self.args if "bottombar" in i]:
            self.dockbar_config, workspace_buttons = self.create_widgets(
                "horizontal", "BottomBar"
            )
            all_panels_enabled = False
            self.bottom_panel.present()
        if "--bottombar-apps" in self.args:
            self.bottom_panel.set_content(self.dockbar_config)
        if "--bottombar-workspaces" in self.args:
            self.bottom_panel.set_content(workspace_buttons)
        if "--bottombar-todo" in self.args:
            self.bottom_panel.set_content(self.todo_label_box)

        # gestures
        self.utils.CreateGesture(self.todo_button, 1, self.take_note_app)
        self.utils.CreateGesture(self.clock_box, 1, self.notify_client)
        self.utils.CreateGesture(self.window_title, 1, self.manage_window_notes)
        self.utils.CreateGesture(self.tbclass, 1, self.dock.dockbar_append)
        self.utils.CreateGesture(self.tbclass, 3, self.dock.join_windows)
        self.utils.CreateGesture(self.tbSIGKILL, 1, self.sigkill_activewindow)
        self.utils.CreateGesture(self.tbvol, 1, self.toggle_mute_from_sink)
        self.utils.CreateGesture(
            self.top_panel_box_left, 2, self.left_gesture_middle_click
        )
        self.utils.CreateGesture(
            self.top_panel_box_left, 3, self.left_gesture_right_click
        )
        # self.utils.CreateGesture(self.top_panel_box_center, 1, self.center_gesture_left_click)
        self.utils.CreateGesture(
            self.top_panel_box_center, 2, self.center_gesture_middle_click
        )
        self.utils.CreateGesture(
            self.top_panel_box_center, 3, self.center_gesture_right_click
        )
        self.utils.CreateGesture(
            self.top_panel_box_right, 1, self.right_gesture_left_click
        )
        self.utils.CreateGesture(
            self.top_panel_box_right, 2, self.left_gesture_middle_click
        )
        self.utils.CreateGesture(
            self.top_panel_box_right, 3, self.left_gesture_right_click
        )

        # show all panels
        if all_panels_enabled:
            print("okay" * 100)

            self.dock.do_start()
            self.top_panel.present()
            self.right_panel.present()
            # self.left_panel.present()
            self.top_panel_background.present()
            print("okay" * 100)

    def mullvad_status(self):
        """
        Check the status of the Mullvad VPN and update the menu label accordingly.
    
        This function checks the status of the Mullvad VPN by executing the "mullvad status" command,
        and updates the label of the VPN menu item based on the status.
    
        Returns:
            bool: Always returns True.
        """
        # Execute the "mullvad status" command and decode the output
        output = check_output("mullvad status".split()).decode()
        
        # Update the menu label based on the output
        if "Disconnected" in output:
            vpn_menu = self.menus["VPN"]
            vpn_menu.set_label("VPN Disconnected")
        elif "Connected" in output:
            vpn_menu = self.menus["VPN"]
            vpn_menu.set_label("VPN")
        
        return True
    
    def take_note_app(self, *_):
        """
        Open the note-taking application specified in the configuration file.
    
        This function reads the configuration file to retrieve the command for the note-taking application,
        and then executes the command to open the application.
    
        Args:
            *_: Additional arguments (unused).
    
        Returns:
            None
        """
        # Read the configuration file and load the configuration
        with open(self.topbar_config, "r") as f:
            config = toml.load(f)
        
        # Run the note-taking application using the specified command
        self.utils.run_app(config["take_note_app"]["cmd"])
    
    def HyprlandInstance(self):
        """
        Create and return an instance of the Hyprland class.
    
        Returns:
            Hyprland: An instance of the Hyprland class.
        """
        return Hyprland()
    
    def get_monitor_info(self):
        """
        Retrieve information about the connected monitors.
    
        This function retrieves information about the connected monitors, such as their dimensions and names,
        and returns the information as a dictionary.
    
        Returns:
            dict: A dictionary containing information about the connected monitors.
        """
        # Get the default display and retrieve information about the connected monitors
        screen = Gdk.Display.get_default()
        monitors = screen.get_monitors()
        monitor_info = {}
        for monitor in monitors:
            monitor_width = monitor.get_geometry().width
            monitor_height = monitor.get_geometry().height
            name = monitor.props.connector
            monitor_info[name] = [monitor_width, monitor_height]
        
        return monitor_info
    
    def HyprInfo(self):
        """
        Retrieve information about the active window.
    
        This function retrieves information about the active window, such as its window class and address,
        and returns the information as a dictionary.
    
        Returns:
            dict: A dictionary containing information about the active window.
        """
        info = {}
        info["window_class"] = self.instance.get_active_window().initial_wm_class
        info["address"] = self.instance.get_active_window().address
        return info
    
    def create_widgets(self, orientation, class_style):
        """
        Create widgets based on the specified orientation and class style.
    
        This function creates widgets, such as a dockbar and workspace buttons, based on the specified
        orientation and class style, and returns the created widgets.
    
        Args:
            orientation (str): The orientation of the widgets (e.g., "horizontal", "vertical").
            class_style (str): The class style of the widgets.
    
        Returns:
            tuple: A tuple containing the created dockbar and workspace buttons.
        """
        dockbar = self.utils.CreateFromAppList(
            orientation, self.dockbar_config, class_style
        )
        workspace_buttons = self.utils.CreateFromAppList(
            orientation, self.workspace_list_config, class_style
        )
        return dockbar, workspace_buttons
    
    def todo_txt(self):
        """
        Update the label of the TODO button with the last line from the TODO.txt file.
    
        This function reads the last line from the TODO.txt file and updates the label of the TODO button
        with the content of the last line.
    
        Returns:
            bool: Always returns True.
        """
        # Define the path to the TODO.txt file
        todo_filepath = os.path.join(self.home, "Documentos", "todo.txt")
        
        # Read the last line from the TODO.txt file
        last_line = open(todo_filepath, "r").readlines()[-1]
        
        # Update the label of the TODO button with the content of the last line
        self.todo_button.set_label(last_line.strip())
        
        return True
    
    def on_button_press_event(self, widget, event):
        """
        Handle the button press event.
    
        This function handles the button press event by checking the type of the event and the button
        that was pressed, and then performing the corresponding action.
    
        Args:
            widget: The widget that emitted the event.
            event: The event object containing information about the event.
    
        Returns:
            None
        """
        if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:
            return True
    
    def right_side_middle_click(self, gesture, data, x, y):
        """
        Handle the middle click gesture on the right side.
    
        This function handles the middle click gesture on the right side by executing the "kitty" command
        to open the Kitty terminal emulator.
    
        Args:
            gesture: The gesture object.
            data: Additional data (unused).
            x: The x-coordinate of the click.
            y: The y-coordinate of the click.
    
        Returns:
            None
        """
        Popen("kitty".split())
    
    def scroll_event(self, controller, _dx, dy):
        """
        Handle the scroll event.
    
        This function handles the scroll event by checking the direction of the scroll and adjusting
        the volume accordingly using the "pactl" command.
    
        Args:
            controller: The controller object.
            _dx: The horizontal delta (unused).
            dy: The vertical delta representing the direction and speed of the scroll.
    
        Returns:
            None
        """
        # Check the direction of the scroll and adjust the volume using the "pactl" command
        if dy > 0:
            self.utils.run_app("pactl -- set-sink-volume 0 -8%")
        else:
            self.utils.run_app("pactl -- set-sink-volume 0 +8%")

    def left_gesture_left_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["left_side_gestures"]["left_click"]
        self.utils.run_app(cmd, True)

    def left_gesture_right_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["left_side_gestures"]["right_click"]
        self.utils.run_app(cmd, True)

    def left_gesture_middle_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["left_side_gestures"]["middle_click"]
        self.utils.run_app(cmd, True)

    def center_gesture_left_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["center_side_gestures"]["left_click"]
        self.utils.run_app(cmd, True)

    def center_gesture_middle_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["center_side_gestures"]["middle_click"]
        self.utils.run_app(cmd, True)

    def center_gesture_right_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["left_side_gestures"]["right_click"]
        self.utils.run_app(cmd, True)

    def right_gesture_left_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["right_side_gestures"]["left_click"]
        self.utils.run_app(cmd, True)

    def right_gesture_right_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["right_side_gestures"]["right_click"]
        self.utils.run_app(cmd, True)

    def right_gesture_middle_click(self, gesture, data, x, y):
        cmd = self.panel_cfg["right_side_gestures"]["middle_click"]
        self.utils.run_app(cmd, True)

    def create_simple_action(self):
        """
        Create a simple action to run a command.
    
        This function creates a simple action named "run-command" that takes a string parameter.
        It connects the "activate" signal of the action to the menu_run_action method.
    
        Args:
            None
    
        Returns:
            None
        """
        # Create a simple action with the specified name and parameter type
        action = Gio.SimpleAction(name="run-command", parameter_type=GLib.VariantType("s"))
        
        # Connect the "activate" signal of the action to the menu_run_action method
        action.connect("activate", self.menu_run_action)
        
        # Add the action to the application
        app.add_action(action)
    
    def create_menu_item(self, menu, name, cmd):
        """
        Create a menu item with the specified name and command.
    
        This function creates a menu item with the specified name and command,
        sets its action to "app.run-command" with the command as the target value,
        and appends the menu item to the specified menu.
    
        Args:
            menu (Gio.Menu): The menu to which the menu item should be appended.
            name (str): The name of the menu item.
            cmd (str): The command associated with the menu item.
    
        Returns:
            None
        """
        # Create a new menu item with the specified name
        menuitem = Gio.MenuItem.new(name, None)
        
        # Set the action of the menu item to "app.run-command" with the command as the target value
        menuitem.set_action_and_target_value("app.run-command", GLib.Variant("s", cmd))
        
        # Append the menu item to the specified menu
        menu.append_item(menuitem)
    
    def create_new_menu(self):
        """
        Create a new menu based on the configuration file.
    
        This function reads the menu configuration from a TOML file,
        creates a new menu based on the configuration, and returns a dictionary
        containing the menu buttons associated with the created menus.
    
        Args:
            None
    
        Returns:
            dict: A dictionary containing the menu buttons associated with the created menus.
        """
        # Read the menu configuration from the specified file
        with open(self.menu_config, "r") as f:
            menu_toml = toml.load(f)
        
        # Initialize a dictionary to store the menu buttons
        menu_buttons = {}
        
        # Iterate through the menu configuration and create the corresponding menus and menu items
        for m in menu_toml:
            if m == "icons":
                continue
            menu = Gio.Menu()
            btn = Gtk.MenuButton(label=m)
            btn.add_css_class("NewMenu")
            btn.set_icon_name(menu_toml["icons"][m])
            btn.set_menu_model(menu)
            submenu = None
            dsubmenu = {}
            menu_buttons[m] = btn
            self.create_simple_action()
            for item in menu_toml[m].values():
                name = item[0]["name"]
                cmd = item[0]["cmd"]
                if "submenu" in item[0]:
                    submenu_label = item[0]["submenu"]
                    submenu = dsubmenu.get(submenu_label)
                    if submenu is None:
                        submenu = Gio.Menu()
                        dsubmenu[submenu_label] = submenu
                    self.create_menu_item(submenu, name, cmd)
                else:
                    self.create_menu_item(menu, name, cmd)
            if dsubmenu:
                [menu.append_submenu(k, dsubmenu[k]) for k in dsubmenu.keys()]
        
        # Return the dictionary containing the menu buttons
        return menu_buttons

    def sigkill_activewindow(self, *_):
        pid = self.instance.get_active_window().pid
        cmd = "kill -9 {0}".format(pid)
        self.utils.run_app(cmd)

    def menu_run_action(self, action, param):
        self.utils.run_app(param.get_string())

    def update_clock(self):
        self.clock_button.set_label(datetime.now().strftime("%d %A %H:%M"))
        return True

    def load_topbar_config(self):
        with open(self.topbar_config, "r") as f:
            return toml.load(f)

    def clean_pid_store(self):
        # [optimization]
        # every 10 minutes check for non-existent pids and clean the dict
        for pid in self.psutil_store.keys():
            if pid not in self.pid_list:
                del self.psutil_store[pid]

    def copy_to_clipboard(self, *_):
        # lazy to not use wl-copy
        self.utils.run_app("wl-copy {0}".format(self.instance.get_active_window().pid))

    def sink_input_info(self):
        pactl = "pactl list sink-inputs".split()
        sink_inputs = check_output(pactl).decode()
        sinklist = sink_inputs.split("Sink Input #")
        info = {}
        info["sinklist"] = sinklist
        return info

    def toggle_mute_from_sink(self, *_):
        pid = self.instance.get_active_window().pid
        info = self.sink_input_info()
        sinklist = info["sinklist"]
        for sink in sinklist:
            if 'application.process.id = "{0}"'.format(pid) in sink:
                sink = sink.split("\n")[0]
                self.utils.run_app("pactl set-sink-input-mute {0} toggle".format(sink))

    def notify_client(self, *_):
        self.utils.run_app("swaync-client -t")

    def disk_usage_by_pid(self):
        pid = self.instance.get_active_window().pid
        p = psutil.Process(pid)
        io_counters = p.io_counters()
        disk_usage_process = io_counters[2] + io_counters[3]  # read_bytes + write_bytes
        return int(round(disk_usage_process / (1024**2), 2))

    def manage_window_notes(self, *_):
        """
        Manage notes for the active window.
    
        This function retrieves information about the active window, such as its initial title
        and window class, and updates a configuration file with this information. It also
        manages the creation and opening of a Markdown file for notes related to the window.
    
        Args:
            *_: Additional arguments (unused).
    
        Returns:
            None
        """
        # Retrieve information about the active window
        active_window = self.instance.get_active_window()
        initial_title = active_window.initial_title.lower()
        wm_class = active_window.initial_wm_class.lower()
        title = active_window.title.lower()
    
        # Adjust the window class based on specific conditions
        if "firefox" in wm_class and "." in title:
            wm_class = title.split()[0]
        if initial_title == "zsh":
            wm_class = title.split()[0]
    
        # Load existing window notes from the configuration file
        with open(self.window_notes_config, "r") as config_file:
            existing_notes = toml.load(config_file)
    
        # Create a new entry for the active window and update the configuration
        new_entry = {wm_class: {"initial_title": initial_title, "title": title}}
        updated_notes = ChainMap(new_entry, existing_notes)
    
        # Save the updated notes back to the configuration file
        with open(self.window_notes_config, "w") as config_file:
            toml.dump(updated_notes, config_file)
    
        # Define the path and command for the Markdown file related to the window
        filepath = f"/home/neo/Notes/{wm_class}.md"
        cmd = f"marktext {filepath}"
    
        # Create the Markdown file if it doesn't exist
        if not os.path.isfile(filepath):
            Path(filepath).touch()
    
        # Print the command and run the Markdown editor application
        print(cmd)
        self.utils.run_app(cmd)


    def output_loop(self, output, label):
        """
        Update the label with the output of a command.
    
        This function executes the specified command, captures its output, and updates
        the label widget with the captured output.
    
        Args:
            output (str): The command whose output will be displayed in the label.
            label (Gtk.Label): The label widget to update with the command output.
    
        Returns:
            bool: True if the label content is successfully updated, False otherwise.
        """
        # Execute the specified command and capture its output
        command_output = check_output(output.split()).decode().strip()
        
        # Set the label content with the captured output using markup
        label.set_markup(command_output)
        
        # Remove the previously scheduled source for single execution
        GLib.Source.remove(self.exec_once)
        
        # Return True to indicate successful update
        return True
    
    def create_cmd_label(self, output, position, css_class, refresh):
        """
        Create and configure a label widget to display command output.
    
        This function creates a label widget with the specified CSS class and adds it to a box container 
        based on the specified position. It also schedules periodic updates of the label content.
    
        Args:
            output (str): The command whose output will be displayed in the label.
            position (str): The position where the label should be added ('left', 'right', or 'center').
            css_class (str): The CSS class to apply to the label and the box container.
            refresh (int): The interval in milliseconds for refreshing the label content.
    
        Returns:
            None
        """
        # Create a new label widget
        label = Gtk.Label()
        
        # Create a new box container
        box = Gtk.Box()
        
        # Configure the box container properties
        box.set_halign(Gtk.Align.END)
        box.set_hexpand(False)
        box.set_baseline_position(Gtk.BaselinePosition.BOTTOM)
        
        # Add the specified CSS class to the box container and the label
        box.add_css_class(css_class)
        label.add_css_class(css_class)
        
        # Add the label to the box container
        box.append(label)
        
        # Determine the position to add the box container and label
        if position == "left":
            self.top_panel_box_left.append(box)
        elif position == "right":
            self.top_panel_box_systray.append(box)
        elif position == "center":
            self.clock_box.append(box)
        
        # Schedule the periodic updates of the label content
        self.exec_once = GLib.timeout_add(1000, lambda: self.output_loop(output, label))
        GLib.timeout_add(refresh, lambda: self.output_loop(output, label))
    
    def cmd_output(self):
        """
        Read command settings from a configuration file and create corresponding command labels.
    
        This function reads command settings from a TOML configuration file, iterates through each setting,
        and creates and configures the corresponding command label using the create_cmd_label function.
    
        Args:
            None
    
        Returns:
            None
        """
        # Read command settings from the configuration file
        with open(self.cmd_config, "r") as config_file:
            cmd_settings = toml.load(config_file)
        
        # Iterate through each command setting and create/configure the corresponding command label
        for label_key in cmd_settings:
            output = cmd_settings[label_key]["cmd"]
            position = cmd_settings[label_key]["position"]
            refresh = cmd_settings[label_key]["refresh"]
            css_class = cmd_settings[label_key]["css_class"]
            
            # Create and configure the command label with the specified settings
            self.create_cmd_label(output, position, css_class, refresh)


                                              
    def volume_watch(self):
        """
        Watch for changes in the volume and update the volume and card labels accordingly.
    
        This function uses the `pulsectl` library to monitor the volume and updates the labels
        with the current volume percentage and the description of the active audio sink.
    
        """
        # Initialize PulseAudio client
        with pulsectl.Pulse("volume-increaser") as pulse:
            
            # Iterate through all the audio sinks
            for sink in pulse.sink_list():
                
                # Check if the sink is currently running (active)
                if "running" in str(sink.state):
                    
                    # Calculate the volume percentage and round it to the nearest whole number
                    volume = round(sink.volume.values[0] * 100)
                    
                    # Update the volume label with the current volume percentage
                    self.tbvol.set_label("Volume: {0}%".format(volume))
                    
                    # Update the card label with the description of the active audio sink
                    self.tbcard.set_label("{0}".format(sink.description))
    
                        
    def update_title_topbar(self):
        """
        Update the title bar based on the currently active window.
    
        Returns:
            bool: True if the update was successful, False otherwise.
        """
        try:
            active_window = self.instance.get_active_window()
            
            # Skip update if the active window hasn't changed or if in the "OVERVIEW" workspace
            if self.active_window_changed != active_window.address:
                self.active_window_changed = active_window.address
            else:
                return True
            if self.instance.get_workspace_by_name("OVERVIEW"):
                return True
            
            
            # Extract window information
            title, wclass, initial_title = self.extract_window_info(active_window)
            
            # Apply custom icon if available
            wclass = self.apply_custom_icon(wclass)
            
            # Modify title based on certain patterns
            title = self.modify_title(title)
            
            # Update title and icon
            self.update_title_and_icons(title, wclass, initial_title)
            
        except Exception as e:
            # Handle exceptions
            pass
        
        return True
    
    def update_widgets(self):
        """
        Update widgets based on the currently active window.
    
        Returns:
            bool: True if the update was successful, False otherwise.
        """
        try:
            active_window = self.instance.get_active_window()
            
            # Skip update if in fullscreen or in the "OVERVIEW" workspace
            if not self.instance.get_workspace_by_name("OVERVIEW"):
                return True
            
            # Extract window information
            title, workspace_id, pid, wclass, initial_title = self.extract_widget_info(active_window)
            
            # Apply custom icon if available
            wclass = self.apply_custom_icon(wclass)
            
            # Fetch and format process information
            mem_usage, exe, cpu_usage = self.fetch_process_info(pid)
            
            # Modify title based on certain patterns
            title = self.modify_title(title)
            
            # Update widget labels and icons
            self.update_widget_labels(workspace_id, pid, wclass, cpu_usage, mem_usage, exe)
            
            # Update title and icon
            self.update_title_and_icons(title, wclass, initial_title)
            
        except Exception as e:
            # Handle exceptions
            pass
        
        return True
    
    # Helper methods
    def extract_window_info(self, active_window):
        """Extract and return window information."""
        title = active_window.title[0:100]
        wclass = active_window.initial_wm_class.lower()
        initial_title = active_window.initial_title
        return title, wclass, initial_title
    
    def extract_widget_info(self, active_window):
        """Extract and return widget-related information."""
        title = active_window.title[0:100]
        workspace_id = active_window.workspace_id
        pid = active_window.pid
        wclass = active_window.initial_wm_class.lower()
        initial_title = active_window.initial_title
        return title, workspace_id, pid, wclass, initial_title
    
    def apply_custom_icon(self, wclass):
        """Apply custom icon if available."""
        try:
            return self.panel_cfg["change_icon_title"][wclass]
        except Exception as e:
            pass
        return wclass
    
    def fetch_process_info(self, pid):
        """Fetch and return process information."""
        if pid not in self.psutil_store.keys():
            process = psutil.Process(pid)
            self.psutil_store[pid] = process
        mem_usage = self.utils.convert_size(int(self.psutil_store[pid].memory_info().rss))
        exe = self.psutil_store[pid].exe()
        cpu_usage = int(self.psutil_store[pid].cpu_percent())
        return mem_usage, exe, cpu_usage
    
    def modify_title(self, title):
        """Modify title based on certain patterns."""
        if "www." in title:
            title = title.split("www.")[1]
        if " — " in title:
            title = title.split(" — ")[0]
        return title
    
    def update_title_and_icons(self, title, wclass, initial_title):
        """Update title and icons."""
        self.window_title.set_icon_name(wclass)
        self.tbclass.set_icon_name(wclass)
        self.window_title.set_label(title)
        if initial_title == "zsh":
            label = title.split(" ")[0]
            icon_exist = [i for i in self.icon_theme_list if label in i]
            if icon_exist:
                self.window_title.set_icon_name(label)
                self.tbclass.set_icon_name("{0}".format(label))
        icon_exist = [i for i in self.icon_theme_list if wclass in i]
        if not icon_exist:
            icon = icon_exist[-1]
            self.window_title.set_icon_name(icon)
            self.tbclass.set_icon_name(icon)
    
    def update_widget_labels(self, workspace_id, pid, wclass, cpu_usage, mem_usage, exe):
        """Update widget labels."""
        self.tbworkspace.set_label("W: {0}".format(workspace_id))
        self.tbpid.set_label("PID: {0}".format(pid))
        self.tbclass.set_label("{0}".format(wclass))
        self.tbcpusage.set_label("CPU: {0}%".format(cpu_usage))
        self.tbmemusage.set_label("MEM: {0}".format(mem_usage))
        self.tbexe.set_label("Exe: {0}".format(exe))
        self.tbdiskusage.set_label("Disk: {0}MB".format(self.disk_usage_by_pid()))
        self.volume_watch()
    
    
app = Panel(application_id="com.hyprpanel.GtkApplication")
app.run(None)
    